name: BetaHazard CI

on:
  push:
    branches: [ BetaHazard ]
  pull_request:
    branches: [ BetaHazard ]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install coverage flake8
        cd src
        python3 -m pip install -r reqsNonPi.txt
        cd ..

    - name: Install latest Mosquitto
      run: |
        sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
        sudo apt-get update
        sudo apt-get install -y mosquitto
        mosquitto_passwd -c -b mosquitto-bh.pwd race-admin fu56rg20
        sudo cp mosquitto-bh.* /etc/mosquitto/conf.d/
        sudo systemctl restart mosquitto

    - name: Build schema docs
      run: |
        python3 -m pip install json-schema-for-humans
        mkdir -p doc/schemas
        python3 -m json_schema_for_humans.generate src/config.schema.json doc/schemas/config.html
        python3 -m json_schema_for_humans.generate src/race_formats.schema.json doc/schemas/race_formats.html
        python3 -m json_schema_for_humans.generate src/vtxconfig_schema-1.0.json doc/schemas/vtxconfig.html

    - name: Lint with flake8
      run: |
        cd src
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        cd ..

    - name: Python tests
      run: |
        cd src
        coverage run --branch -m unittest discover -v
        cd ..

    - name: Install Arduino CI
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6
        working-directory: src/node
        bundler-cache: true

    - name: Node tests
      run: |
        cd src/node
        ./run-ci-tests.sh
        cd ../..
      shell: bash

    - name: Set up node
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Build UI
      run: |
        cd race-explorer
        npm install
        npm run build
        cd ..

    - name: Upload code coverage
      uses: codecov/codecov-action@v1
      with:
        functionalities: gcov

  node-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board:
          - "arduino:avr:nano:cpu=atmega328"
          - "STMicroelectronics:stm32:GenF1:pnum=BLUEPILL_F103C8,xserial=generic,usb=none,xusb=FS,opt=osstd,rtlib=nano"
          - "esp32:esp32:esp32:PSRAM=disabled,PartitionScheme=default,CPUFreq=240,FlashMode=qio,FlashFreq=80,FlashSize=4M,UploadSpeed=921600,DebugLevel=none"
        include:
          - board: "arduino:avr:nano:cpu=atmega328"
            platform: "arduino:avr"
            flags: "-DUSE_I2C"
          - board: "STMicroelectronics:stm32:GenF1:pnum=BLUEPILL_F103C8,xserial=generic,usb=none,xusb=FS,opt=osstd,rtlib=nano"
            platform: "STMicroelectronics:stm32"
            opts: "--additional-urls https://github.com/stm32duino/BoardManagerFiles/raw/master/package_stmicroelectronics_index.json"
          - board: "esp32:esp32:esp32:PSRAM=disabled,PartitionScheme=default,CPUFreq=240,FlashMode=qio,FlashFreq=80,FlashSize=4M,UploadSpeed=921600,DebugLevel=none"
            platform: "esp32:esp32"
            opts: "--additional-urls https://dl.espressif.com/dl/package_esp32_index.json"
            flags: "-DUSE_WIFI -DUSE_MQTT"
          - board: "esp8266:esp8266:generic:xtal=80,vt=flash,exception=disabled,stacksmash=disabled,ssl=all,mmu=3232,non32xfer=fast,ResetMethod=nodemcu,CrystalFreq=26,FlashFreq=40,FlashMode=dout,eesz=1M64,led=2,sdk=nonosdk_190703,ip=lm2f,dbg=Disabled,lvl=None____,wipe=none,baud=115200"
            platform: "esp8266:esp8266"
            opts: "--additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json"
            flags: "-DUSE_WIFI"
          - board: "m5stack:esp32:stamp-pico"
            platform: "m5stack:esp32"
            opts: "--additional-urls https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/arduino/package_m5stack_index.json"
            flags: "-DUSE_WIFI"

    steps:
    - uses: actions/checkout@v2
    - uses: arduino/setup-arduino-cli@v1.1.1
    - run: |
        arduino-cli update ${{ matrix.opts }}
        arduino-cli core install ${{ matrix.platform }} ${{ matrix.opts }}
        arduino-cli lib install MQTT
        arduino-cli compile -b ${{ matrix.board }} --build-property "compiler.cpp.extra_flags=${{ matrix.flags }}" src/node
  